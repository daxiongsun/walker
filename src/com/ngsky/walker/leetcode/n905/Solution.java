package com.ngsky.walker.leetcode.n905;

import java.util.Arrays;

/**
 * <dl>
 * <dt>Solution</dt>
 * <dd>Description:</dd>
 * <dd>CreateDate: 19-7-22 下午11:01</dd>
 * </dl>
 * <p>
 * <p>
 * 给定一个数组A，要求返回一个 偶数在前，奇数在后的数组A
 * 例如：
 * 输入： [3,1,2,4]
 * 输出: [2,4,1,3]
 * 或者 [2,4,3,1] / [4,2,3,1] / [4,2,1,3] 中的一个
 * <p>
 * 注意：
 * 1. 1 <= A.length <= 5000
 * 2. 0 <= A[i] <= 5000
 *
 * @author ngsky
 */
public class Solution {
    public int[] sortArrayByParity(int[] A) {
        int len = A.length - 1;
        for (int i = 0; i <= len; i++) {
            if (A[i] % 2 != 0) {
                while (len > i) {
                    if (A[len] % 2 == 0) {
                        int tmp = A[i];
                        A[i] = A[len];
                        A[len] = tmp;
                        len--;
                        break;
                    }
                    len--;
                }
            }
        }
        return A;
    }

    public static void main(String[] args) {
        Solution so = new Solution();
        int[] A = new int[]{3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
                , 23, 23, 23, 12, 12, 12, 12, 12, 12, 124, 5, 45, 4, 55, 555, 56, 5, 6, 57, 8, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 923, 4, 567, 678, 677, 1234, 4999, 698, 5000, 87, 78, 78, 78, 78, 78, 78, 78, 78
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
                , 23, 23, 23, 12, 12, 12, 12, 12, 12, 124, 5, 45, 4, 55, 555, 56, 5, 6, 57, 8, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 923, 4, 567, 678, 677, 1234, 4999, 698, 5000, 87, 78, 78, 78, 78, 78, 78, 78, 78
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
                , 23, 23, 23, 12, 12, 12, 12, 12, 12, 124, 5, 45, 4, 55, 555, 56, 5, 6, 57, 8, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 923, 4, 567, 678, 677, 1234, 4999, 698, 5000, 87, 78, 78, 78, 78, 78, 78, 78, 78
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
                , 23, 23, 23, 12, 12, 12, 12, 12, 12, 124, 5, 45, 4, 55, 555, 56, 5, 6, 57, 8, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 923, 4, 567, 678, 677, 1234, 4999, 698, 5000, 87, 78, 78, 78, 78, 78, 78, 78, 78
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
                , 23, 23, 23, 12, 12, 12, 12, 12, 12, 124, 5, 45, 4, 55, 555, 56, 5, 6, 57, 8, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 923, 4, 567, 678, 677, 1234, 4999, 698, 5000, 87, 78, 78, 78, 78, 78, 78, 78, 78
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7, 3, 4, 1, 2, 3, 4, 15, 20, 18, 6, 7
                , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
                , 23, 23, 23, 12, 12, 12, 12, 12, 12, 124, 5, 45, 4, 55, 555, 56, 5, 6, 57, 8, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 923, 4, 567, 678, 677, 1234, 4999, 698, 5000, 87, 78, 78, 78, 78, 78, 78, 78, 78
        };
        System.out.println("length:" + A.length);
        long startTime = System.currentTimeMillis();
        int[] ret = so.sortArrayByParity(A);
        long endTime = System.currentTimeMillis();
        System.out.println("time:" + (endTime - startTime) / 1000 + " s");
        Arrays.stream(ret).forEach((item) -> System.out.println(item));
    }
}
